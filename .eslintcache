[{"/Users/davidlaufer/sprint4/src/index.js":"1","/Users/davidlaufer/sprint4/src/redux/store.js":"2","/Users/davidlaufer/sprint4/src/root-cmp.jsx":"3","/Users/davidlaufer/sprint4/src/redux/Slice.js":"4","/Users/davidlaufer/sprint4/src/routes.js":"5","/Users/davidlaufer/sprint4/src/pages/bnb-app.jsx":"6","/Users/davidlaufer/sprint4/src/cmp/app-header.jsx":"7","/Users/davidlaufer/sprint4/src/cmp/login-signup.jsx":"8","/Users/davidlaufer/sprint4/src/store/user.actions.js":"9","/Users/davidlaufer/sprint4/src/services/event-bus.service.js":"10","/Users/davidlaufer/sprint4/src/services/user.service.js":"11","/Users/davidlaufer/sprint4/src/store/store.js":"12","/Users/davidlaufer/sprint4/src/services/async-storage.service.js":"13","/Users/davidlaufer/sprint4/src/store/review.actions.js":"14","/Users/davidlaufer/sprint4/src/store/bnb.reducer.js":"15","/Users/davidlaufer/sprint4/src/store/user.reducer.js":"16","/Users/davidlaufer/sprint4/src/store/review.reducer.js":"17","/Users/davidlaufer/sprint4/src/store/system.reducer.js":"18","/Users/davidlaufer/sprint4/src/services/review.service.js":"19"},{"size":788,"mtime":1663223417473,"results":"20","hashOfConfig":"21"},{"size":242,"mtime":1663166037188,"results":"22","hashOfConfig":"21"},{"size":578,"mtime":1663235895585,"results":"23","hashOfConfig":"21"},{"size":691,"mtime":1663166037188,"results":"24","hashOfConfig":"21"},{"size":768,"mtime":1663223417474,"results":"25","hashOfConfig":"21"},{"size":441,"mtime":1663235822768,"results":"26","hashOfConfig":"21"},{"size":1691,"mtime":1663223417472,"results":"27","hashOfConfig":"21"},{"size":0,"mtime":1663228180691,"results":"28","hashOfConfig":"21"},{"size":2237,"mtime":1663223417479,"results":"29","hashOfConfig":"21"},{"size":1235,"mtime":1663167552837,"results":"30","hashOfConfig":"21"},{"size":3265,"mtime":1663223417477,"results":"31","hashOfConfig":"21"},{"size":999,"mtime":1663223417478,"results":"32","hashOfConfig":"21"},{"size":2080,"mtime":1663167552836,"results":"33","hashOfConfig":"21"},{"size":1516,"mtime":1663167552844,"results":"34","hashOfConfig":"21"},{"size":1648,"mtime":1663223417478,"results":"35","hashOfConfig":"21"},{"size":1393,"mtime":1663167552845,"results":"36","hashOfConfig":"21"},{"size":647,"mtime":1663167552844,"results":"37","hashOfConfig":"21"},{"size":309,"mtime":1663167552845,"results":"38","hashOfConfig":"21"},{"size":2008,"mtime":1663223417476,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bcx9lh",{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},"/Users/davidlaufer/sprint4/src/index.js",[],"/Users/davidlaufer/sprint4/src/redux/store.js",[],"/Users/davidlaufer/sprint4/src/root-cmp.jsx",[],"/Users/davidlaufer/sprint4/src/redux/Slice.js",[],"/Users/davidlaufer/sprint4/src/routes.js",[],"/Users/davidlaufer/sprint4/src/pages/bnb-app.jsx",[],"/Users/davidlaufer/sprint4/src/cmp/app-header.jsx",["82"],"import React from 'react'\nimport { connect } from 'react-redux'\nimport { Link, NavLink } from 'react-router-dom'\n\nimport routes from '../routes'\n\n\nimport { onLogin, onLogout, onSignup, loadUsers, removeUser } from '../store/user.actions.js'\nimport { LoginSignup } from './login-signup.jsx'\n\nfunction _AppHeader({ onLogin, onSignup, onLogout, user }) {\n\n    return (\n        <header className=\"app-header\">\n            <nav>\n                {routes.map(route => <NavLink key={route.path} to={route.path}>{route.label}</NavLink>)}\n\n                {user &&\n                    <span className=\"user-info\">\n                        <Link to={`user/${user._id}`}>\n                            {user.imgUrl && <img src={user.imgUrl} />}\n                            {user.fullname}\n                        </Link>\n                        <span className=\"score\">{user.score?.toLocaleString()}</span>\n                        <button onClick={onLogout}>Logout</button>\n                    </span>\n                }\n\n                {!user &&\n                    <section className=\"user-info\">\n                        <LoginSignup onLogin={onLogin} onSignup={onSignup} />\n                    </section>\n                }\n\n            </nav>\n\n            <h1>My App</h1>\n        </header>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        users: state.userModule.users,\n        user: state.userModule.user,\n        count: state.userModule.count,\n        isLoading: state.systemModule.isLoading\n    }\n}\nconst mapDispatchToProps = {\n    onLogin,\n    onSignup,\n    onLogout,\n    loadUsers,\n    removeUser\n}\n\n\n\nexport const AppHeader = connect(mapStateToProps, mapDispatchToProps)(_AppHeader)","/Users/davidlaufer/sprint4/src/cmp/login-signup.jsx",[],"/Users/davidlaufer/sprint4/src/store/user.actions.js",[],"/Users/davidlaufer/sprint4/src/services/event-bus.service.js",[],"/Users/davidlaufer/sprint4/src/services/user.service.js",["83"],"import { storageService } from './async-storage.service'\n// import { httpService } from './http.service'\nimport { store } from '../store/store'\nimport { getActionSetWatchedUser } from '../store/review.actions'\n// import { socketService, SOCKET_EVENT_USER_UPDATED, SOCKET_EMIT_USER_WATCH } from './socket.service'\nimport { showSuccessMsg } from '../services/event-bus.service'\n\nconst STORAGE_KEY_LOGGEDIN_USER = 'loggedinUser'\n\nexport const userService = {\n    login,\n    logout,\n    signup,\n    getLoggedinUser,\n    saveLocalUser,\n    getUsers,\n    getById,\n    remove,\n    update,\n    changeScore\n}\n\nwindow.userService = userService\n\n\nfunction getUsers() {\n    return storageService.query('user')\n    // return httpService.get(`user`)\n}\n\nfunction onUserUpdate(user) {\n    showSuccessMsg(`This user ${user.fullname} just got updated from socket, new score: ${user.score}`)\n    store.dispatch(getActionSetWatchedUser(user))\n}\n\nasync function getById(userId) {\n    const user = await storageService.get('user', userId)\n    // const user = await httpService.get(`user/${userId}`)\n\n    // socketService.emit(SOCKET_EMIT_USER_WATCH, userId)\n    // socketService.off(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\n    // socketService.on(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\n\n    return user\n}\nfunction remove(userId) {\n    return storageService.remove('user', userId)\n    // return httpService.delete(`user/${userId}`)\n}\n\nasync function update(user) {\n    await storageService.put('user', user)\n    // user = await httpService.put(`user/${user._id}`, user)\n    // Handle case in which admin updates other user's details\n    if (getLoggedinUser()._id === user._id) saveLocalUser(user)\n    return user;\n}\n\nasync function login(userCred) {\n    const users = await storageService.query('user')\n    const user = users.find(user => user.username === userCred.username)\n    // const user = await httpService.post('auth/login', userCred)\n    if (user) {\n        // socketService.login(user._id)\n        return saveLocalUser(user)\n    }\n}\nasync function signup(userCred) {\n    userCred.score = 10000;\n    const user = await storageService.post('user', userCred)\n    // const user = await httpService.post('auth/signup', userCred)\n    // socketService.login(user._id)\n    return saveLocalUser(user)\n}\nasync function logout() {\n    sessionStorage.removeItem(STORAGE_KEY_LOGGEDIN_USER)\n    // socketService.logout()\n    // return await httpService.post('auth/logout')\n}\n\nasync function changeScore(by) {\n    const user = getLoggedinUser()\n    if (!user) throw new Error('Not loggedin')\n    user.score = user.score + by || by\n    await update(user)\n    return user.score\n}\n\n\nfunction saveLocalUser(user) {\n    sessionStorage.setItem(STORAGE_KEY_LOGGEDIN_USER, JSON.stringify(user))\n    return user\n}\n\nfunction getLoggedinUser() {\n    return JSON.parse(sessionStorage.getItem(STORAGE_KEY_LOGGEDIN_USER))\n}\n\n\n// ;(async ()=>{\n//     await userService.signup({fullname: 'Puki Norma', username: 'user1', password:'123',score: 10000, isAdmin: false})\n//     await userService.signup({fullname: 'Master Adminov', username: 'admin', password:'123', score: 10000, isAdmin: true})\n//     await userService.signup({fullname: 'Muki G', username: 'muki', password:'123', score: 10000})\n// })()\n\n\n\n","/Users/davidlaufer/sprint4/src/store/store.js",[],"/Users/davidlaufer/sprint4/src/services/async-storage.service.js",[],"/Users/davidlaufer/sprint4/src/store/review.actions.js",["84","85"],"import { showSuccessMsg } from '../services/event-bus.service'\nimport { reviewService } from '../services/review.service'\nimport { userService } from '../services/user.service'\n\n// Action Creators\nexport function getActionRemoveReview(reviewId) {\n  return { type: 'REMOVE_REVIEW', reviewId }\n}\nexport function getActionAddReview(review) {\n  return { type: 'ADD_REVIEW', review }\n}\nexport function getActionSetWatchedUser(user) {\n  return { type: 'SET_WATCHED_USER', user }\n}\n\nexport function loadReviews() {\n  return async dispatch => {\n    try {\n      const reviews = await reviewService.query()\n      dispatch({ type: 'SET_REVIEWS', reviews })\n\n    } catch (err) {\n      console.log('ReviewActions: err in loadReviews', err)\n    }\n  }\n}\n\nexport function addReview(review) {\n  return async dispatch => {\n    try {\n      const addedReview = await reviewService.add(review)\n      dispatch(getActionAddReview(addedReview))\n\n      // Change the score in user kept in sessionStorage\n      // userService.saveLocalUser(addedReview.byUser)\n      // const { score } = addedReview.byUser\n      // dispatch({ type: 'SET_SCORE', score })\n\n    } catch (err) {\n      console.log('ReviewActions: err in addReview', err)\n      throw err\n    }\n  }\n}\n\nexport function removeReview(reviewId) {\n  return async dispatch => {\n    try {\n      await reviewService.remove(reviewId)\n      dispatch(getActionRemoveReview(reviewId))\n    } catch (err) {\n      console.log('ReviewActions: err in removeReview', err)\n      throw err\n    }\n  }\n}\n","/Users/davidlaufer/sprint4/src/store/bnb.reducer.js",[],"/Users/davidlaufer/sprint4/src/store/user.reducer.js",[],"/Users/davidlaufer/sprint4/src/store/review.reducer.js",[],"/Users/davidlaufer/sprint4/src/store/system.reducer.js",[],"/Users/davidlaufer/sprint4/src/services/review.service.js",["86","87","88","89","90"],"// import { httpService } from './http.service'\nimport { storageService } from './async-storage.service'\n// import { userService } from './user.service'\n// import { socketService, SOCKET_EVENT_REVIEW_ADDED, SOCKET_EVENT_REVIEW_ABOUT_YOU } from './socket.service'\nimport { getActionRemoveReview, getActionAddReview } from '../store/review.actions'\nimport { store } from '../store/store'\nimport { showSuccessMsg } from '../services/event-bus.service'\n\nconst reviewChannel = new BroadcastChannel('reviewChannel')\n\n// ;(() => {\n//   reviewChannel.addEventListener('message', (ev) => {\n//     store.dispatch(ev.data)\n//   })\n//   socketService.on(SOCKET_EVENT_REVIEW_ADDED, (review) => {\n//     console.log('GOT from socket', review)\n//     store.dispatch(getActionAddReview(review))\n//   })\n//   socketService.on(SOCKET_EVENT_REVIEW_ABOUT_YOU, (review) => {\n//     showSuccessMsg(`New review about me ${review.txt}`)\n//   })\n// })()\n\n\n\nexport const reviewService = {\n  add,\n  query,\n  remove\n}\n\n\nfunction query(filterBy) {\n  var queryStr = (!filterBy) ? '' : `?name=${filterBy.name}&sort=anaAref`\n  // return httpService.get(`review${queryStr}`)\n  return storageService.query('review')\n}\n\nasync function remove(reviewId) {\n  // await httpService.delete(`review/${reviewId}`)\n  await storageService.remove('review', reviewId)\n  reviewChannel.postMessage(getActionRemoveReview(reviewId))\n\n\n}\nasync function add(review) {\n  // const addedReview = await httpService.post(`review`, review)\n\n  review.byUser = userService.getLoggedinUser()\n  review.aboutUser = await userService.getById(review.aboutUserId)\n  const addedReview = await storageService.post('review', review)\n\n  reviewChannel.postMessage(getActionAddReview(addedReview))\n\n  return addedReview\n}\n\n// This way, we can also subscribe to none-store data change\n// function subscribe(listener) {\n//   reviewChannel.addEventListener('message', listener)\n// }\n// function unsubscribe(listener) {\n//   reviewChannel.removeEventListener('message', listener)\n// }\n",{"ruleId":"91","severity":1,"message":"92","line":21,"column":45,"nodeType":"93","endLine":21,"endColumn":70},{"ruleId":"94","severity":1,"message":"95","line":31,"column":10,"nodeType":"96","messageId":"97","endLine":31,"endColumn":22},{"ruleId":"94","severity":1,"message":"98","line":1,"column":10,"nodeType":"96","messageId":"97","endLine":1,"endColumn":24},{"ruleId":"94","severity":1,"message":"99","line":3,"column":10,"nodeType":"96","messageId":"97","endLine":3,"endColumn":21},{"ruleId":"94","severity":1,"message":"100","line":6,"column":10,"nodeType":"96","messageId":"97","endLine":6,"endColumn":15},{"ruleId":"94","severity":1,"message":"98","line":7,"column":10,"nodeType":"96","messageId":"97","endLine":7,"endColumn":24},{"ruleId":"94","severity":1,"message":"101","line":34,"column":7,"nodeType":"96","messageId":"97","endLine":34,"endColumn":15},{"ruleId":"102","severity":2,"message":"103","line":49,"column":19,"nodeType":"96","messageId":"104","endLine":49,"endColumn":30},{"ruleId":"102","severity":2,"message":"103","line":50,"column":28,"nodeType":"96","messageId":"104","endLine":50,"endColumn":39},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'onUserUpdate' is defined but never used.","Identifier","unusedVar","'showSuccessMsg' is defined but never used.","'userService' is defined but never used.","'store' is defined but never used.","'queryStr' is assigned a value but never used.","no-undef","'userService' is not defined.","undef"]